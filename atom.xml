<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>走四方</title>
  <subtitle>路迢迢，水长长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-07-15T13:54:22.801Z</updated>
  <id>/</id>
  
  <author>
    <name>Anne</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="/2019/07/15/interview/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/"/>
    <id>/2019/07/15/interview/算法相关/</id>
    <published>2019-07-15T13:54:22.801Z</published>
    <updated>2019-07-15T13:54:22.801Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>object-proxy</title>
    <link href="/2019/04/12/front-end/basic/object-proxy/"/>
    <id>/2019/04/12/front-end/basic/object-proxy/</id>
    <published>2019-04-12T06:42:21.000Z</published>
    <updated>2019-07-15T13:41:10.913Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端测试</title>
    <link href="/2019/04/12/front-end/advance/fe-test/"/>
    <id>/2019/04/12/front-end/advance/fe-test/</id>
    <published>2019-04-12T03:58:01.000Z</published>
    <updated>2019-07-15T13:41:10.873Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="React单元测试"><a href="#React单元测试" class="headerlink" title="React单元测试"></a>React单元测试</h2><ol>
<li><p>Jest</p>
<p>JS测试</p>
</li>
<li>Enzyme</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;React单元测试&quot;&gt;&lt;a href=&quot;#React单元测试&quot; class=&quot;headerlink&quot; title=&quot;React单元测试&quot;&gt;&lt;/a&gt;React单元测试&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Jest&lt;/p&gt;
&lt;p&gt;JS测
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-hooks</title>
    <link href="/2019/04/11/front-end/React/react-hooks/"/>
    <id>/2019/04/11/front-end/React/react-hooks/</id>
    <published>2019-04-11T12:49:50.000Z</published>
    <updated>2019-07-15T13:41:10.845Z</updated>
    
    <content type="html"><![CDATA[<p>Hook 使你在无需修改组件结构的情况下复用状态逻辑<br>Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。</p>
<p>只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。（React根据调用顺序来取值）<br>只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。（还有一个地方可以调用 Hook —— 就是自定义的 Hook 中，我们稍后会学习到。）<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><p>类似this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> demoRef = useRef(<span class="literal">null</span>);</div><div class="line">demoRef.current = <span class="string">'12'</span>;<span class="comment">// 赋值</span></div><div class="line">demoRef.current<span class="comment">// 取值</span></div><div class="line">&lt;input ref=&#123;demoRef &#125; /&gt;<span class="comment">// 赋值</span></div></pre></td></tr></table></figure></p>
<h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</div><div class="line">  &#125;;</div><div class="line">&#125;, [props.friend.id]);<span class="comment">// 只在props.friend.id变化时更新</span></div></pre></td></tr></table></figure></p>
<h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><p>返回一个 memoized 回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)。</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> memoizedCallback = useCallback(</div><div class="line">  () =&gt; &#123;</div><div class="line">    doSomething(a, b);</div><div class="line">  &#125;,</div><div class="line">  [a, b],</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>返回一个 memoized 值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</div><div class="line"></div><div class="line"></div><div class="line">React.memo(<span class="function">(<span class="params">props</span>) =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">comp</span> /&gt;</span>), (props) =&gt; sholudUpdate() )</span></div></pre></td></tr></table></figure></p>
<h3 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h3><p>自定义 Hook 更像是一种约定而不是功能。</p>
<h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> value = useContext(MyContext);<span class="comment">// （MyContext为React.createContext 的返回值）</span></div></pre></td></tr></table></figure>
<h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> newState</div><div class="line"> <span class="keyword">const</span> init = <span class="function">(<span class="params">initialArg</span>) =&gt;</span> initialState</div><div class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);<span class="comment">//</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hook 使你在无需修改组件结构的情况下复用状态逻辑&lt;br&gt;Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。&lt;/p&gt;
&lt;p&gt;只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。（React根据调用顺序来取值）&lt;br&gt;只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。（还有一个地方可以调用 Hook —— 就是自定义的 Hook 中，我们稍后会学习到。）&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Suspense</title>
    <link href="/2019/04/11/front-end/React/react-suspense/"/>
    <id>/2019/04/11/front-end/React/react-suspense/</id>
    <published>2019-04-11T12:49:50.000Z</published>
    <updated>2019-07-15T13:41:10.861Z</updated>
    
    <content type="html"><![CDATA[<p>Suspense<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> getName = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    resolve(<span class="string">'Morgan'</span>);</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="keyword">const</span> fetcher = createFetcher(getName);</div><div class="line"> </div><div class="line"><span class="keyword">const</span> Greeting = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;fetcher()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> SuspenseDemo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;Suspense&gt;</div><div class="line">      &lt;Greeting /&gt;</div><div class="line">    &lt;<span class="regexp">/Suspense&gt;</span></div><div class="line"><span class="regexp">  );</span></div></pre></td></tr></table></figure></p>
<p>可与lazy连用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Suspense, lazy &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> DemoA = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./demo/a'</span>))</div><div class="line"><span class="keyword">const</span> DemoB = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./demo/b'</span>))</div><div class="line"></div><div class="line">&lt;Suspense&gt;</div><div class="line">  &lt;NavLink to=<span class="string">"/demoA"</span>&gt;DemoA&lt;<span class="regexp">/NavLink&gt;</span></div><div class="line"><span class="regexp">  &lt;NavLink to="/</span>demoB<span class="string">"&gt;DemoB&lt;/NavLink&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">  &lt;Router&gt;</span></div><div class="line"><span class="string">    &lt;DemoA path="</span>/demoA<span class="string">" /&gt;</span></div><div class="line"><span class="string">    &lt;DemoB path="</span>/demoB<span class="string">" /&gt;</span></div><div class="line"><span class="string">  &lt;/Router&gt;</span></div><div class="line"><span class="string">&lt;/Suspense&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Suspense&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>REACT生命周期</title>
    <link href="/2019/04/10/front-end/React/react-life-cycle/"/>
    <id>/2019/04/10/front-end/React/react-life-cycle/</id>
    <published>2019-04-10T09:45:50.000Z</published>
    <updated>2019-07-15T13:41:10.852Z</updated>
    
    <content type="html"><![CDATA[<p>生命周期调用顺序<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一次mount，顺序调用</span></div><div class="line"><span class="keyword">constructor</span>(props)</div><div class="line">componentWillMount()// unsafe</div><div class="line">static getDerivedStateFromProps(props, state)// state,props变化均会调用</div><div class="line">render()</div><div class="line">componentDidMount()</div><div class="line">// update</div><div class="line">componentWillReceiveProps()// unsafe,props变化时调用</div><div class="line">static getDerivedStateFromProps(props, state)// state,props变化均会调用</div><div class="line">shouldComponentUpdate(nextProps, nextState)</div><div class="line">render()</div><div class="line">getSnapshotBeforeUpdate(prevProps, prevState)</div><div class="line">componentDidUpdate(prevProps, prevState, snapshot)</div><div class="line">// unmount</div><div class="line">componentWillUnmount()</div><div class="line"></div><div class="line"></div><div class="line">// error handler</div><div class="line">static getDerivedStateFromError(error)</div><div class="line">componentDidCatch(error, info)</div><div class="line"></div><div class="line">// other API</div><div class="line">setState(updater[, callback])</div><div class="line">forceUpdate(callback)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生命周期调用顺序&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React设计模式</title>
    <link href="/2019/04/10/front-end/React/react-design-pattern/"/>
    <id>/2019/04/10/front-end/React/react-design-pattern/</id>
    <published>2019-04-10T09:13:44.000Z</published>
    <updated>2019-07-15T13:41:10.836Z</updated>
    
    <content type="html"><![CDATA[<p>一些好的代码风格<br><a id="more"></a><br><a href="https://overreacted.io/" target="_blank" rel="external">Overreacted By Dan Abramov</a><br><a href="https://overreacted.io/zh-hans/writing-resilient-components/" target="_blank" rel="external">编写有弹性的组件</a><br><a href="https://github.com/dt-fe/weekly" target="_blank" rel="external">前端精读</a><br><a href="https://juejin.im/post/5cad39b3f265da03502b1c0a" target="_blank" rel="external">【React深入】从Mixin到HOC再到Hook</a><br><a href="https://juejin.im/book/5ba42844f265da0a8a6aa5e9" target="_blank" rel="external">React 实战：设计模式和最佳实践</a></p>
<h2 id="容器组件和展示组件"><a href="#容器组件和展示组件" class="headerlink" title="容器组件和展示组件"></a>容器组件和展示组件</h2><p>一个专注逻辑<br>一个专注UI</p>
<h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><p>接受&gt;=1个组件作为参数，返回一个新的组件<br>  属性代理<br>  渲染劫持</p>
<h2 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h2><p>依赖注入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<h2 id="提供者模式"><a href="#提供者模式" class="headerlink" title="提供者模式"></a>提供者模式</h2><p>Provider、Consumer<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> DemoContext = React.createContext()</div><div class="line"><span class="keyword">const</span> Provider = DemoContext.Provider</div><div class="line"><span class="keyword">const</span> Consumer = DemoContext.Consumer</div><div class="line"></div><div class="line"><span class="comment">// 父组件</span></div><div class="line">&lt;Provider value=&#123;&#123; <span class="attr">la</span>: <span class="string">'la'</span>, <span class="attr">ha</span>: <span class="string">'ha'</span> &#125;&#125;&gt;<span class="xml"><span class="tag">&lt;<span class="name">Page</span> /&gt;</span><span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></div><div class="line"><span class="comment">// 子组件</span></div><div class="line">&lt;Consumer&gt;</div><div class="line">&#123;</div><div class="line">  (context) =&gt; (</div><div class="line">    &lt;div&gt;&#123;context.la&#125;&#123;context.ha&#125;&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  )</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">&lt;/</span>Consumer&gt;</div></pre></td></tr></table></figure></p>
<p>new代码格式<br>old代码格式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 祖先</span></div><div class="line">getChildContext() &#123; <span class="keyword">return</span> &#123;&#125; &#125;</div><div class="line">childContextType = &#123;&#125;</div><div class="line"><span class="comment">// 子</span></div><div class="line"><span class="keyword">static</span> contextType = &#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="组合设计模式"><a href="#组合设计模式" class="headerlink" title="组合设计模式"></a>组合设计模式</h2><p>如 Radio，RadioGroup(只暴露value和onChange事件，内部Item使用map映射)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些好的代码风格&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Object.defineProperty与</title>
    <link href="/2019/04/10/front-end/advance/propertyProxy/"/>
    <id>/2019/04/10/front-end/advance/propertyProxy/</id>
    <published>2019-04-10T08:14:58.000Z</published>
    <updated>2019-07-15T13:41:10.889Z</updated>
    
    <content type="html"><![CDATA[<p>Object.defineProperty()</p>
<a id="more"></a>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/2df6dcddb0d7" target="_blank" rel="external">实现双向绑定Proxy比defineproperty优劣如何</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Object.defineProperty()&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-grammer</title>
    <link href="/2019/04/09/front-end/Vue/vue-grammer/"/>
    <id>/2019/04/09/front-end/Vue/vue-grammer/</id>
    <published>2019-04-09T10:56:52.000Z</published>
    <updated>2019-07-15T13:41:10.863Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.vuejs.org/v2/guide/events.html" target="_blank" rel="external">vue官方文档</a><br><a id="more"></a></p>
<h1 id="vue总结"><a href="#vue总结" class="headerlink" title="vue总结"></a>vue总结</h1><p>渐进式JavaScript 框架</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="模板渲染"><a href="#模板渲染" class="headerlink" title="- 模板渲染"></a>- 模板渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  &#123;&#123; message &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">    data: &#123;</span></div><div class="line"><span class="javascript">      message: <span class="string">'Hello Vue!'</span></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">  &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="指令"><a href="#指令" class="headerlink" title="- 指令"></a>- 指令</h3><p>等号右边为data<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">v-bind:title=<span class="string">"message"</span></div><div class="line"></div><div class="line">v-model=<span class="string">"message"</span><span class="comment">// 实现与data的双向绑定</span></div><div class="line"></div><div class="line">v-<span class="keyword">if</span>=<span class="string">"seen"</span></div><div class="line"></div><div class="line">v-<span class="keyword">for</span>=<span class="string">"todo in todos"</span></div><div class="line">&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;todo-item</span></div><div class="line"><span class="regexp">  v-for="item in groceryList"</span></div><div class="line"><span class="regexp">  v-bind:todo="item"</span></div><div class="line"><span class="regexp">  v-bind:key="item.id"</span></div><div class="line"><span class="regexp">&gt;&lt;/</span>todo-item&gt;</div><div class="line"></div><div class="line">v-on:click=<span class="string">"reverseMessage"</span><span class="comment">// reverseMessage为method</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 自定义事件也可以用于创建支持 v-model 的自定义输入组件。记住：</span></div><div class="line">&lt;input v-model=<span class="string">"searchText"</span> /&gt;</div><div class="line"><span class="comment">// 等价于：</span></div><div class="line">&lt;input</div><div class="line">  v-bind:value=<span class="string">"searchText"</span></div><div class="line">  v-on:input=<span class="string">"searchText = $event.target.value"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h4 id="指令缩写"><a href="#指令缩写" class="headerlink" title="指令缩写"></a>指令缩写</h4><p><a href="https://blog.csdn.net/gaoxiaoba/article/details/52756280" target="_blank" rel="external">v-bind,v-on的缩写</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">"someDynamicCondition"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"someDynamicCondition"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新建vue实例</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="comment">// 选项</span></div><div class="line">  data,<span class="comment">// object | function(vm),function参数为当前vue实例,可访问到其它属性，如props等，若非箭头函数则this指向当前vue实例</span></div><div class="line">  props,<span class="comment">// Array&lt;string&gt; | Object 对象允许配置高级选项，如类型检测、自定义校验和设置默认值</span></div><div class="line">  computed,<span class="comment">// &#123; [key: string]: Function | &#123; get: Function, set: Function &#125; &#125;</span></div><div class="line">  methods,<span class="comment">// &#123; [key: string]: Function &#125;,方法中的 this 自动绑定为 Vue 实例。不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。</span></div><div class="line">  watch,<span class="comment">// &#123; [key: string]: string | Function(val, oldVal) | Object | Array &#125;,回调函数，值也可以是方法名，或者包含选项的对象。</span></div><div class="line"></div><div class="line">  el,<span class="comment">// string | Element , 在实例挂载之后，元素可以用 vm.$el 访问。</span></div><div class="line">  template,<span class="comment">// string</span></div><div class="line">  render,<span class="comment">// (createElement: () =&gt; VNode) =&gt; VNode。 Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数</span></div><div class="line">  renderError,</div><div class="line"></div><div class="line">  beforeCreate,</div><div class="line">  created,</div><div class="line">  beforeMount,</div><div class="line">  mounted,<span class="comment">// 注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted：</span></div><div class="line">  beforeUpdate,</div><div class="line">  updated,</div><div class="line">  activated,<span class="comment">// keep-alive 组件激活时调用。</span></div><div class="line">  deactivated,<span class="comment">// keep-alive 组件停用时调用。</span></div><div class="line">  beforeDestroy,</div><div class="line">  destroyed,</div><div class="line">  errorCaptured,<span class="comment">// (err: Error, vm: Component, info: string) =&gt; ?boolean当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</span></div><div class="line"></div><div class="line">  components,<span class="comment">// 包含 Vue 实例可用组件的哈希表。</span></div><div class="line">  directives,<span class="comment">// 包含 Vue 实例可用指令的哈希表。</span></div><div class="line"></div><div class="line">  <span class="comment">// 指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 this.$parent 访问父实例，子实例被推入父实例的 $children 数组中。</span></div><div class="line">  mixins, <span class="comment">// Array&lt;Object&gt; mixins 选项接受一个混入对象的数组。这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 Vue.extend() 里最终选择使用相同的选项合并逻辑合并。举例：如果你的混入包含一个钩子而创建组件本身也有一个，两个函数将被调用。Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用</span></div><div class="line"></div><div class="line">&#125;)</div><div class="line">vm.$data<span class="comment">// 访问原始数据对象，访问 vm.a(代理, 以 _ 或 $ 开头的属性**不会**被Vue实例代理) 等价于访问 vm.$data.a</span></div><div class="line"></div><div class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</div><div class="line">  <span class="comment">// todo-item 组件现在接受一个</span></div><div class="line">  <span class="comment">// "prop"，类似于一个自定义特性。</span></div><div class="line">  <span class="comment">// 这个 prop 名为 todo。</span></div><div class="line">  <span class="comment">// props: ['todo'],</span></div><div class="line">  props: &#123;</div><div class="line">    <span class="comment">// 检测类型</span></div><div class="line">    height: <span class="built_in">Number</span>,</div><div class="line">    <span class="comment">// 检测类型 + 其他验证</span></div><div class="line">    age: &#123;</div><div class="line">      type: <span class="built_in">Number</span>,</div><div class="line">      <span class="keyword">default</span>: <span class="number">0</span>,</div><div class="line">      required: <span class="literal">true</span>,</div><div class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> value &gt;= <span class="number">0</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  template: <span class="string">'&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;'</span>,</div><div class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// Code that will run only after the</span></div><div class="line">      <span class="comment">// entire view has been rendered</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><h3 id="数据绑定实现"><a href="#数据绑定实现" class="headerlink" title="数据绑定实现"></a>数据绑定实现</h3><p>???服务器端渲染</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/events.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue 初步</title>
    <link href="/2019/04/09/front-end/Vue/start-with-vue/"/>
    <id>/2019/04/09/front-end/Vue/start-with-vue/</id>
    <published>2019-04-09T10:08:53.000Z</published>
    <updated>2019-07-15T13:41:10.862Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="external">Vue 风格指南</a><br><a id="more"></a><br>Vue三要素</p>
<p>响应式: 例如如何监听数据变化,其中的实现方法就是我们提到的双向绑定<br>模板引擎: 如何解析模板<br>渲染: Vue如何将监听到的数据变化和解析后的HTML进行渲染</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/style-guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue 风格指南&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GIT常用命令整理</title>
    <link href="/2019/04/05/Tec/git/gitCommands/"/>
    <id>/2019/04/05/Tec/git/gitCommands/</id>
    <published>2019-04-05T12:07:10.000Z</published>
    <updated>2019-07-15T13:41:10.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>工作目录–add–》暂存区–commit–》本地repository–push–》远端repository<br><a id="more"></a></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">GIT中文文档</a></p>
<p><a href="http://www.runoob.com/manual/git-guide/" target="_blank" rel="external">GIT简明指南</a></p>
<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git clone ... <span class="comment">#克隆git repository到本地</span></div><div class="line">git config --global user.name <span class="string">"张三"</span></div><div class="line">git config --global user.email <span class="string">"zhangsan@asd.com"</span></div><div class="line">git add . <span class="comment">#添加文件到缓存区(待commit)</span></div><div class="line">git commit -m <span class="string">"提交说明"</span> <span class="comment">#将缓存区文件加到git repository</span></div><div class="line">git push [remote-name] [branch-name] <span class="comment">#推送master分支的commit内容到remote服务器，如:</span></div><div class="line">git push origin master</div><div class="line"></div><div class="line">git pull (&lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;)<span class="comment"># 从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支</span></div><div class="line">git fetch (&lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;)<span class="comment"># 从远端仓库中获得数据（不会自动合并或修改你当前的工作，需手动merge）</span></div></pre></td></tr></table></figure>
<h3 id="Reset操作"><a href="#Reset操作" class="headerlink" title="Reset操作"></a>Reset操作</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git reset --hard origin/master <span class="comment">#回退到某一版本origin/master</span></div><div class="line">git reset --hard commitID <span class="comment">#回退到某一commit状态，commitID可以使用git log 看到，很长的hash字符串</span></div><div class="line">git rest HEAD file <span class="comment">#file路径(支持正则),取消文件的暂存(add) </span></div><div class="line">git checkout -- file <span class="comment">#file路径(支持正则),放弃对文件的修改，类似revert(danger:你对那个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它)</span></div></pre></td></tr></table></figure>
<h3 id="查看当前更改"><a href="#查看当前更改" class="headerlink" title="查看当前更改"></a>查看当前更改</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git status <span class="comment">#查看是否有更改， -s查看简要</span></div><div class="line">git diff <span class="comment">#查看更改，只显示尚未暂存（add）的改动</span></div><div class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt; <span class="comment">#比较两个分支(target_branch默认为当前分支) </span></div><div class="line">git diff --cached &lt;source_branch&gt; &lt;target_branch&gt; <span class="comment"># (同--staged)查看已暂存(add)的将要添加到下次提交里的内容</span></div></pre></td></tr></table></figure>
<h3 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git show <span class="comment">#默认查看上一次commit内容</span></div><div class="line">git log <span class="comment">#查看commit记录，-p显示详细diff，-2显示最近两条，--state显示提交文件详情，--shortstate显示增删改条数，--pretty=online在一行显示</span></div><div class="line">git log --oneline --decorate <span class="comment">#查看各个分支当前所指的对象</span></div><div class="line">git log --pretty=format:<span class="string">"%an %ad %cn %cd %s"</span>查看提交记录，只显示作者、修改日期、提交者、提交日期和提交说明</div></pre></td></tr></table></figure>
<h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作:"></a>分支操作:</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git branch <span class="comment">#查看当前本地所有分支， --merged查看已合并到当前分支的分支，--no-merged查看未合并到当前分支的分支</span></div><div class="line">git branch -v <span class="comment">#查看当前所有分支及最后一次提交记录</span></div><div class="line">git branch -r <span class="comment">#查看远端分支</span></div><div class="line">git branch a <span class="comment">#创建a分支</span></div><div class="line">git checkout a <span class="comment">#切换到master分支</span></div><div class="line">git checkout -b a <span class="comment">#创建aaa并切换到aaa </span></div><div class="line">git branch -d aaa <span class="comment">#删除aaa分支，如有未处理的更改将会失败</span></div><div class="line">git branch -D aaa <span class="comment">#强制删除aaa分支</span></div><div class="line">git push origin mybranch <span class="comment">#推送分支到远端(可供协同工作)</span></div></pre></td></tr></table></figure>
<h3 id="Remot操作"><a href="#Remot操作" class="headerlink" title="Remot操作"></a>Remot操作</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git remote <span class="comment">#查看远端名称(默认为orign)</span></div><div class="line">git remote -v <span class="comment">#查看remote名及对应url</span></div><div class="line">git remote add test https://url.com <span class="comment">#添加一个远端仓库,test为仓库名，后面为仓库地址</span></div><div class="line">git remote show [remote-name]  <span class="comment">#显示远端仓库详情</span></div><div class="line">git remote rename oldName newName <span class="comment">#重命名</span></div><div class="line">git remote rm  name <span class="comment">#移除远端仓库</span></div></pre></td></tr></table></figure>
<h3 id="变基操作"><a href="#变基操作" class="headerlink" title="变基操作"></a>变基操作</h3><p><strong>只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将 targetBranch的基改为baseBranch(会merge修改)，若baseBranch为 targetBranch的祖先，则无变化，targetBranch默认为当前分支</span></div><div class="line">git rebase baseBranch targetBranch</div></pre></td></tr></table></figure></p>
<h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag <span class="comment">#查看已有标签</span></div><div class="line">git tag v1.<span class="number">1</span> <span class="comment">#打标签</span></div><div class="line">git show v1.<span class="number">1</span> <span class="comment">#查看标签详情</span></div></pre></td></tr></table></figure>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><h4 id="fetch和pull区别"><a href="#fetch和pull区别" class="headerlink" title="fetch和pull区别"></a>fetch和pull区别</h4><p><a href="https://blog.csdn.net/riddle1981/article/details/74938111" target="_blank" rel="external">详解git fetch与git pull的区别</a><br>git fetch 命令会将远端数据拉取到你的本地仓库，它并不会自动合并。<br>基本情况下git pull = git fetch + git merge<br>如果需要有选择的合并git fetch是更好的选择。效果相同时git pull将更为快捷。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;工作目录–add–》暂存区–commit–》本地repository–push–》远端repository&lt;br&gt;
    
    </summary>
    
      <category term="Tec" scheme="/categories/Tec/"/>
    
      <category term="Git" scheme="/categories/Tec/Git/"/>
    
    
      <category term="Git" scheme="/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JS事件机制</title>
    <link href="/2019/04/03/front-end/basic/js/event/"/>
    <id>/2019/04/03/front-end/basic/js/event/</id>
    <published>2019-04-03T07:32:29.000Z</published>
    <updated>2019-07-15T13:41:10.907Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 监听subscribe，可有多个listener</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'needReload'</span>, (event) =&gt; &#123;</div><div class="line">  <span class="comment">// event.detail可得到传参</span></div><div class="line">  <span class="comment">// 相应处理</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// dispatch一个event， detail字段用于传参</span></div><div class="line"><span class="built_in">window</span>.dispatchEvent(<span class="keyword">new</span> CustomEvent(<span class="string">'needReload'</span>, &#123; <span class="attr">detail</span>: <span class="string">'123'</span> &#125;))</div><div class="line"><span class="comment">// remove一个listener</span></div><div class="line"> <span class="built_in">window</span>.removeEventListener(<span class="string">'needReload'</span>, <span class="keyword">this</span>.needReload)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cascading Style Sheets</title>
    <link href="/2019/03/28/front-end/basic/css/css/"/>
    <id>/2019/03/28/front-end/basic/css/css/</id>
    <published>2019-03-28T02:37:36.000Z</published>
    <updated>2019-07-15T13:41:10.897Z</updated>
    
    <content type="html"><![CDATA[<p>CSS也是很重要的<br><a id="more"></a><br><img src="/img/css_priority.jpg" alt="css层叠与继承"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS也是很重要的&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019.03.28</title>
    <link href="/2019/03/28/dailyDiary/2019/2019-03-28/"/>
    <id>/2019/03/28/dailyDiary/2019/2019-03-28/</id>
    <published>2019-03-28T02:28:18.000Z</published>
    <updated>2019-07-15T13:41:10.835Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>
function doDecrypt(pwd, onError) {
	console.log("in doDecrypt");
	var txt = document.getElementById("enc_content").innerHTML;
	var plantext;
	try {
	  	var bytes = CryptoJS.AES.decrypt(txt, pwd);
		plaintext = bytes.toString(CryptoJS.enc.Utf8);
	} catch(err) {
		if(onError) {onError(err);}
		return;
	}
	document.getElementById("enc_content").innerHTML = plaintext;
	document.getElementById("enc_content").style.display = "block";
   document.getElementById("enc_passwd").style.display = "none";
}
</script>
<div id="enc_content" style="display:none">U2FsdGVkX187L+AbNb3iZIsnq+e8lR2Nh6y17TJ5UdUlu9UH0fSnDDzumCMsO0ISD5h26x15FxIEWbKk014y11+TAX4PInqE8J3wJRmR+6X/MtMCuUSO+h5rR0r/kVKf/e3jSiS+JL7mkGBryolx0rzIvSnXZiim7wsnD2FrRviWeqjzYyup0yo1zZV6H+h3NsktZcAEG3gwnZazBtnMJqvIE7aB/8XOq1d1OKWYHU64T3wsutTTma2UPW59jnKffbRQtYcGrGJeXpllChjnzU/0ktxcY0n5iOxjI+pxKowf00VVnBxaUiZBxX1bjP/Xyea4OLLDGmtrx9zxdz9JorCyoFrklN49/7RzziS0KxNYb242s6vV9rY1ibPUD0TIFF7bl/FsZpEUdNZVJebwRbBzZXhsFRMDYFA47XqvX2/LzU9jCj8sO8WGaFrO81T8Z3OlqWMt6q23HjsUamPk+/roR/t+Xr7qK5MDQ/uT4aUZQYxq8qnG4uzOCy9XQ5Cx0HCOJMvkl824wvdwR84PdHsStauzirerw/sZnsuwIUODDrejqnN8VF8N0NftWIqq/O227VNgAJd2WTGFMRWztaxidhhJeTy5GjD1BxZ6ihTl5JGwPDd+kkHWz5Ee3xKqejJRbg4faaCD074ZO+iPFR8RJXyqvrzUg0a3ORw67PxuTfTPoygA/QnCU251zPkh5zkuw+gWtywBVp0f7dkogSfx73R70eSAnutRKRbGi7s26HtEYOMmgGqn1uojhIgREZxE+Yv74yPuEijFquZyOq5nYkkFMMJlhmMlBtiX3PxzGUD82fY1MFtIPtQoFxyXVHXTza6UZq4mYzMYVpcy41u8ZIgFBAk0QExEAo2yH/zb1qQKC2UKr98mfGpWo41nX92yvD90C92mncLi0tDickUDqWWljPYVYOJBHpCTsECr71ZF4HKOEcHJffsgsOwI1rOpc3o9E4B+MhYwcYzNO/oYJBE1SCEjBmhTRpheMXYXn/8folQDVwcy2QJf4E7JU8PQP1Zh5kLqDM93Xw+45X+agk9ji5+J+RMtVgfQfGLdBidMI8DdU6PU9Ec+5jV2aMLADx7Hb6DFVgni8EEu868tDjIqDlNHBmPVcUH+Z4YGilddicf5ThWYbZ3sNQfM98wvAKYE4NIdvxl1z2VQZRkUZ54syf4A9mJX8VCkncq7pPXoyKlf2br9wZopZj9M6XKUx8FPdeZo8k2RDUkSNhh0buqiQagHoNICzaQC1dY9ceWDD1iRWVLh2E955/vd3LmngN56NN+38yrqkm3wREEHFFRmICYwutGJYAtvOViJCSSCtDaTMS0qHyqv25aXc0DkK8VCEo2nyHNPPtbR1KYGQSSdmeOvnFOIr4/w/7Le4/LpmKGuy8hYrcvuTLtcjH7SKY5pY1/0/dKxkYi3mI/8hcn0p577wq1mmkFYMwLCRZI7cI78f4tusVqjF+aBTPeIcTIMi6T0pi3f/ta3jtMcmtgVSWiGwKBYk4GiLm+28ZLRInrUhU4VK9yifK1genKBPjhYnwKnc937ne1wMge4w6p0Y6j+4Z1UhyKpMp5J1FK2DRBuuVbQm7u3Wo0LF0mTGZRoSabNJJG8ZhP2uQV5DKTJ5LwgIed1IIR/OV/w3vbDPyMnxf4h0R8HdqXZhr9ofMsWo1jCUFYJ6ErGwnmk1+LaWVA4qffhiOjw4n0afAg2fbctsx6WoBGaAgxv/dcRIMTP4BDNSZoDQzlPO/wjk/tBf7ftON3PrzDavMsB8SthfKkEv79Xn0dPKxQXn7qQaw2g0s0HsP3P1/b8kGRDYiOWS2ImQsHOLQsdVcLx3dwZ9nkyc0Q2X1bN/3zUSotBNpdvCPFjIBIunL+ZTtlyoZdp23kOa06E5wFBjq8dovoVW3mr7yPIM0BDgWYddb9e/nJy+3YOOvJcjsOsJ+EHOymANQtK0pDeN1GW+H6afcdZLdfqlmqy4iR2isfF+a8+/ec9Qk3Ui6I3QkFDYAFit5eOtCTffotID7kBtFgzWqTYJFoGFNNe27uztdVr1FIKOnZbk1iCaUlCIXYYO3Em4nJrTk9rJ42RAzF8oFU+/2h4c9miKZJQXeBTYMkNIu5zK7vt5KKyVbFxdtDFpWu+0KxwLleRzbb45hJrI7BS0CZAt2NML2Ctd2rBnlhYDOhg5Ezt54uibt6RAeHIIYGbbl9kvZO3EZh1Woagh6mwtgnfCiu/ylT3IbzSA3YPqWf1kcSdpaDD9iQ1pbpWyQndjfBU1ghJhbl1OonuauK+GWouqOoZ0rarJSGR3lJk</div><div id="enc_passwd"> <input id="enc_pwd_input" type="text" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div>
<script>
var onError = function(error) {
	document.getElementById("enc_error").innerHTML = "password error!"
};
function decrypt() {
var passwd = document.getElementById("enc_pwd_input").value;
console.log(passwd);
doDecrypt(passwd, onError);
}
</script>
</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;青春须早为，岂能长少年。&lt;br&gt;
    
    </summary>
    
      <category term="dailyDiary" scheme="/categories/dailyDiary/"/>
    
    
      <category term="morningDiary" scheme="/tags/morningDiary/"/>
    
  </entry>
  
  <entry>
    <title>面试小结</title>
    <link href="/2019/03/06/interview/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/"/>
    <id>/2019/03/06/interview/面试小结/</id>
    <published>2019-03-06T14:39:46.000Z</published>
    <updated>2019-07-15T13:53:33.544Z</updated>
    
    <content type="html"><![CDATA[<p>啦啦啦<br><a id="more"></a></p>
<h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><h3 id="Promise实现原理"><a href="#Promise实现原理" class="headerlink" title="Promise实现原理"></a>Promise实现原理</h3><ul>
<li>自己写一个Promise</li>
<li>异步实现<h3 id="JS实现倒计时"><a href="#JS实现倒计时" class="headerlink" title="JS实现倒计时"></a>JS实现倒计时</h3>实现倒计时的几种方式:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// setInterval</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">counter</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> clear = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(counter--)</div><div class="line">    <span class="keyword">if</span> (counter &lt; <span class="number">0</span>) &#123;</div><div class="line">      clearInterval(clear)</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Generator + setTimeOut +递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">nextId</span> (<span class="params">maxId = <span class="number">-1</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(count &lt;= maxId) &#123;</div><div class="line">    <span class="keyword">yield</span> count ++</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDownWithLogger</span> (<span class="params">logger</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> next = logger.next()</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!next.done) &#123;</div><div class="line">      <span class="built_in">console</span>.log(next.value)</div><div class="line">      countDownWithLogger(logger)</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">counter</span>) </span>&#123;</div><div class="line">  countDownWithLogger(nextId(counter))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// promise</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">max</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve(max - <span class="number">1</span>)</div><div class="line">  <span class="keyword">let</span> i = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span>(i &lt;= max - <span class="number">1</span>) &#123;</div><div class="line">    i++</div><div class="line">    p = p.then(<span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(count--)</div><div class="line">            resolve(count)</div><div class="line">          &#125;, <span class="number">1000</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(max) <span class="comment">// 第一个值立即输出</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// async await</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logCount</span> (<span class="params">count</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(count--)</div><div class="line">          resolve(count);</div><div class="line">      &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">count</span>) </span>&#123;</div><div class="line">  <span class="keyword">while</span>(count &gt;= <span class="number">0</span>) &#123;</div><div class="line">    count = <span class="keyword">await</span> logCount(count) </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">countDown(<span class="number">4</span>)</div></pre></td></tr></table></figure>
<h3 id="REDUX原理"><a href="#REDUX原理" class="headerlink" title="REDUX原理"></a>REDUX原理</h3><h3 id="双向绑定原理"><a href="#双向绑定原理" class="headerlink" title="双向绑定原理"></a>双向绑定原理</h3><p>  JS实现双向绑定</p>
<h3 id="await原理"><a href="#await原理" class="headerlink" title="await原理"></a>await原理</h3><h3 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h3><h3 id="闭包作用，缺点？"><a href="#闭包作用，缺点？" class="headerlink" title="闭包作用，缺点？"></a>闭包作用，缺点？</h3><p>带环境的函数，可以访问到定义环境作用域的内容<br>缺点：受环境影响函数执行结果不同，环境作用域不会被垃圾回收机制回收，内存浪费</p>
<h3 id="深浅拷贝的区别和用途？"><a href="#深浅拷贝的区别和用途？" class="headerlink" title="深浅拷贝的区别和用途？"></a>深浅拷贝的区别和用途？</h3><p>简单数据结构都是值拷贝，复杂数据区别:<br>深拷贝：值拷贝，不会相互影响<br>浅拷贝: 引用拷贝，操作同一块内存区域，相互影响</p>
<h3 id="CSS-有哪些实现布局的方式？"><a href="#CSS-有哪些实现布局的方式？" class="headerlink" title="CSS 有哪些实现布局的方式？"></a>CSS 有哪些实现布局的方式？</h3><pre><code>[CSS常见布局方式](http://baijiahao.baidu.com/s?id=1580578435186877828&amp;wfr=spider&amp;for=pc)
使用BFC隐藏属性
float + margin
absolute + margin
圣杯布局
双飞翼布局
flex布局
</code></pre><p>  以上5种方式都可以实现两栏或三栏布局</p>
<h3 id="CSS-命名冲突如何解决？"><a href="#CSS-命名冲突如何解决？" class="headerlink" title="CSS 命名冲突如何解决？"></a>CSS 命名冲突如何解决？</h3><p>css-module</p>
<h3 id="介绍下-ES-里的-Generator-是怎么运行的？和-async-await-有何区别？"><a href="#介绍下-ES-里的-Generator-是怎么运行的？和-async-await-有何区别？" class="headerlink" title="介绍下 ES 里的 Generator 是怎么运行的？和 async + await 有何区别？"></a>介绍下 ES 里的 Generator 是怎么运行的？和 async + await 有何区别？</h3><p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450083887673122b45a4414333ac366c3c935125e7000" target="_blank" rel="external">generator</a></p>
<p>​ &gt; 从计算机角度看，生成器是一种类协程或半协程，它提供了一种可以通过特定语句或方法使其执行对象暂停的功能。<br>​ Generator函数，返回一个部署了Iterator接口的遍历器对象，用来操作内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p>
<p>await的语义是:必须等到await后面跟的Promise有了返回值，才能继续执行await的下一行代码<br>generator由function<em>定义（注意多出的</em>号），并且，除了return语句，还可以用yield返回多次。<br>调用generator对象有两个方法</p>
<pre><code>1. 一是不断地调用generator对象的next()方法（得到{value, done}）
</code></pre><ol>
<li>for … of循环迭代generator对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logAfterSeconds</span> (<span class="params">seconds = <span class="number">1</span>, content</span>) </span>&#123;</div><div class="line">  setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(content)</div><div class="line">  &#125;, seconds * <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">nextId</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">yield</span> count ++</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="React-里的-key-有什么用？"><a href="#React-里的-key-有什么用？" class="headerlink" title="React 里的 key 有什么用？"></a>React 里的 key 有什么用？</h3><pre><code>组件的唯一标示，用于virtual dom判断
</code></pre><h3 id="React-里什么时候用-Context？"><a href="#React-里什么时候用-Context？" class="headerlink" title="React 里什么时候用 Context？"></a>React 里什么时候用 Context？</h3><pre><code>组件嵌套层级深且有数据共享情况时
</code></pre><h3 id="render-props-是什么？什么时候用？和Hoc的异同"><a href="#render-props-是什么？什么时候用？和Hoc的异同" class="headerlink" title="render props 是什么？什么时候用？和Hoc的异同"></a>render props 是什么？什么时候用？和Hoc的异同</h3><h3 id="路由如何做权限校验？"><a href="#路由如何做权限校验？" class="headerlink" title="路由如何做权限校验？"></a>路由如何做权限校验？</h3><h3 id="SSR-的原理是什么？"><a href="#SSR-的原理是什么？" class="headerlink" title="SSR 的原理是什么？"></a>SSR 的原理是什么？</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啦啦啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试常见问题</title>
    <link href="/2019/03/06/front-end/advance/interview/"/>
    <id>/2019/03/06/front-end/advance/interview/</id>
    <published>2019-03-06T14:28:48.000Z</published>
    <updated>2019-07-15T13:41:10.880Z</updated>
    
    <content type="html"><![CDATA[<p>几个问题<br><a id="more"></a></p>
<ol>
<li>闭包作用，缺点？<br>带环境的函数，可以访问到定义环境作用域的内容<br>缺点：受环境影响函数执行结果不同，环境作用域不会被垃圾回收机制回收，内存浪费</li>
<li>深浅拷贝的区别和用途？<br>简单数据结构都是值拷贝，复杂数据区别:<br>深拷贝：值拷贝，不会相互影响<br>浅拷贝: 引用拷贝，操作同一块内存区域，相互影响</li>
<li><p>CSS 有哪些实现布局的方式？<br> <a href="http://baijiahao.baidu.com/s?id=1580578435186877828&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">CSS常见布局方式</a><br> 使用BFC隐藏属性<br> float + margin<br> absolute + margin<br> 圣杯布局<br> 双飞翼布局<br> flex布局<br>以上5种方式都可以实现两栏或三栏布局</p>
</li>
<li><p>CSS 命名冲突如何解决？<br>css-module</p>
</li>
<li><p>介绍下 ES 里的 Generator 是怎么运行的？和 async + await 有何区别？</p>
</li>
</ol>
<p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450083887673122b45a4414333ac366c3c935125e7000" target="_blank" rel="external">generator</a></p>
<p>​ &gt; 从计算机角度看，生成器是一种类协程或半协程，它提供了一种可以通过特定语句或方法使其执行对象暂停的功能。<br>​ Generator函数，返回一个部署了Iterator接口的遍历器对象，用来操作内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p>
<p>await的语义是:必须等到await后面跟的Promise有了返回值，才能继续执行await的下一行代码<br>generator由function<em>定义（注意多出的</em>号），并且，除了return语句，还可以用yield返回多次。<br>调用generator对象有两个方法</p>
<pre><code>1. 一是不断地调用generator对象的next()方法（得到{value, done}）
</code></pre><ol>
<li>for … of循环迭代generator对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logAfterSeconds</span> (<span class="params">seconds = <span class="number">1</span>, content</span>) </span>&#123;</div><div class="line">  setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(content)</div><div class="line">  &#125;, seconds * <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">nextId</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">yield</span> count ++</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>React 里的 key 有什么用？<br> 组件的唯一标示，用于virtual dom判断</li>
<li>React 里什么时候用 Context？<br> 组件嵌套层级深且有数据共享情况时</li>
<li><p>render props 是什么？什么时候用？和Hoc的异同</p>
</li>
<li><p>路由如何做权限校验？</p>
</li>
<li><p>SSR 的原理是什么？</p>
</li>
</ol>
<p>实现倒计时的几种方式:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// setInterval</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">counter</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> clear = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(counter--)</div><div class="line">    <span class="keyword">if</span> (counter &lt; <span class="number">0</span>) &#123;</div><div class="line">      clearInterval(clear)</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Generator + setTimeOut +递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">nextId</span> (<span class="params">maxId = <span class="number">-1</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(count &lt;= maxId) &#123;</div><div class="line">    <span class="keyword">yield</span> count ++</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDownWithLogger</span> (<span class="params">logger</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> next = logger.next()</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!next.done) &#123;</div><div class="line">      <span class="built_in">console</span>.log(next.value)</div><div class="line">      countDownWithLogger(logger)</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">counter</span>) </span>&#123;</div><div class="line">  countDownWithLogger(nextId(counter))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// promise</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">max</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve(max - <span class="number">1</span>)</div><div class="line">  <span class="keyword">let</span> i = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span>(i &lt;= max - <span class="number">1</span>) &#123;</div><div class="line">    i++</div><div class="line">    p = p.then(<span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(count--)</div><div class="line">            resolve(count)</div><div class="line">          &#125;, <span class="number">1000</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(max) <span class="comment">// 第一个值立即输出</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// async await</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logCount</span> (<span class="params">count</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(count--)</div><div class="line">          resolve(count);</div><div class="line">      &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">count</span>) </span>&#123;</div><div class="line">  <span class="keyword">while</span>(count &gt;= <span class="number">0</span>) &#123;</div><div class="line">    count = <span class="keyword">await</span> logCount(count) </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">countDown(<span class="number">4</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个问题&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS异步编程</title>
    <link href="/2019/03/06/front-end/advance/asynchronous/"/>
    <id>/2019/03/06/front-end/advance/asynchronous/</id>
    <published>2019-03-06T14:28:48.000Z</published>
    <updated>2019-07-15T13:41:10.865Z</updated>
    
    <content type="html"><![CDATA[<p>Promise Generator async await<br><a id="more"></a></p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> i =<span class="number">0</span>;</div><div class="line">      <span class="built_in">console</span>.log(i++)</div><div class="line">      resolve(i)</div><div class="line">      reject(<span class="string">'I am error after resolve'</span>)</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(value++)</div><div class="line">            resolve(value)</div><div class="line">          &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(value++)</div><div class="line">            reject(<span class="string">'I am error'</span>)</div><div class="line">            resolve(<span class="string">'I am value after error'</span>)<span class="comment">// 不会执行</span></div><div class="line">          &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;<span class="comment">// 不会执行到此处</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'skip me'</span>)</div><div class="line">    <span class="built_in">console</span>.log(value)</div><div class="line">  &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>)</div><div class="line">    <span class="built_in">console</span>.log(error)</div><div class="line">  &#125;)</div><div class="line">  <span class="built_in">console</span>.log(p)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><ol>
<li>介绍下 ES 里的 Generator 是怎么运行的？和 async + await 有何区别？</li>
</ol>
<p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450083887673122b45a4414333ac366c3c935125e7000" target="_blank" rel="external">generator</a></p>
<p>​ &gt; 从计算机角度看，生成器是一种类协程或半协程，它提供了一种可以通过特定语句或方法使其执行对象暂停的功能。<br>​ Generator函数，返回一个部署了Iterator接口的遍历器对象，用来操作内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p>
<p>await的语义是:必须等到await后面跟的Promise有了返回值，才能继续执行await的下一行代码<br>generator由function<em>定义（注意多出的</em>号），并且，除了return语句，还可以用yield返回多次。<br>调用generator对象有两个方法</p>
<pre><code>1. 一是不断地调用generator对象的next()方法（得到{value, done}）
</code></pre><ol>
<li>for … of循环迭代generator对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logAfterSeconds</span> (<span class="params">seconds = <span class="number">1</span>, content</span>) </span>&#123;</div><div class="line">  setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(content)</div><div class="line">  &#125;, seconds * <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">nextId</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">yield</span> count ++</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>自己写一个Promise</li>
<li>异步实现<h3 id="JS实现倒计时"><a href="#JS实现倒计时" class="headerlink" title="JS实现倒计时"></a>JS实现倒计时</h3>实现倒计时的几种方式:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// setInterval</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">counter</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> clear = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(counter--)</div><div class="line">    <span class="keyword">if</span> (counter &lt; <span class="number">0</span>) &#123;</div><div class="line">      clearInterval(clear)</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Generator + setTimeOut +递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">nextId</span> (<span class="params">maxId = <span class="number">-1</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(count &lt;= maxId) &#123;</div><div class="line">    <span class="keyword">yield</span> count ++</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDownWithLogger</span> (<span class="params">logger</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> next = logger.next()</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!next.done) &#123;</div><div class="line">      <span class="built_in">console</span>.log(next.value)</div><div class="line">      countDownWithLogger(logger)</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">counter</span>) </span>&#123;</div><div class="line">  countDownWithLogger(nextId(counter))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// promise</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">max</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve(max - <span class="number">1</span>)</div><div class="line">  <span class="keyword">let</span> i = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span>(i &lt;= max - <span class="number">1</span>) &#123;</div><div class="line">    i++</div><div class="line">    p = p.then(<span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(count--)</div><div class="line">            resolve(count)</div><div class="line">          &#125;, <span class="number">1000</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(max) <span class="comment">// 第一个值立即输出</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// async await</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logCount</span> (<span class="params">count</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(count--)</div><div class="line">          resolve(count);</div><div class="line">      &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">countDown</span> (<span class="params">count</span>) </span>&#123;</div><div class="line">  <span class="keyword">while</span>(count &gt;= <span class="number">0</span>) &#123;</div><div class="line">    count = <span class="keyword">await</span> logCount(count) </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">countDown(<span class="number">4</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Promise Generator async await&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新起点</title>
    <link href="/2018/12/03/Plan/fight/"/>
    <id>/2018/12/03/Plan/fight/</id>
    <published>2018-12-03T14:58:55.000Z</published>
    <updated>2018-12-03T15:22:41.831Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>
function doDecrypt(pwd, onError) {
	console.log("in doDecrypt");
	var txt = document.getElementById("enc_content").innerHTML;
	var plantext;
	try {
	  	var bytes = CryptoJS.AES.decrypt(txt, pwd);
		plaintext = bytes.toString(CryptoJS.enc.Utf8);
	} catch(err) {
		if(onError) {onError(err);}
		return;
	}
	document.getElementById("enc_content").innerHTML = plaintext;
	document.getElementById("enc_content").style.display = "block";
   document.getElementById("enc_passwd").style.display = "none";
}
</script>
<div id="enc_content" style="display:none">U2FsdGVkX1+yFoI2q9MhRaYCZsmateBFR/S+UPtlPiTz4yvbBhsd7VHZdr+0+GkoDAqNiCIzvxbVMXOV+ZGGkR6a/K0n7op9DpL5dubmZgTzan4DHHSTv2LIuEZxUkSmRvzh1FxEwNadFh7sVKrfk2w7cQfnaKJjKMCrPf6sdrPErtDVLAslcr0vRenT5oYsWJcZbTqgEGfVCZuZqSHoBnRLBy0E6VZB22pm/Tct4XMDV+2+UR2svmWMoDmqrQb/EqTCj0iba1wFHo+XzjF8dhoRHWNeI+hGcJUpEKHyoPpyAiFvwNWHxyDqvHuqfC22ENzQ1sY7iq99EQID6BO5hGP0OfyNaqnB5hzWgMAuZOQt+QYxdmdWY4LLr1ER/WXh</div><div id="enc_passwd"> <input id="enc_pwd_input" type="text" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div>
<script>
var onError = function(error) {
	document.getElementById("enc_error").innerHTML = "password error!"
};
function decrypt() {
var passwd = document.getElementById("enc_pwd_input").value;
console.log(passwd);
doDecrypt(passwd, onError);
}
</script>
</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欲穷千里目，更上一层楼。&lt;br&gt;
    
    </summary>
    
      <category term="Plan" scheme="/categories/Plan/"/>
    
    
      <category term="Plan" scheme="/tags/Plan/"/>
    
  </entry>
  
  <entry>
    <title>ContextMenu，自定义右键菜单</title>
    <link href="/2018/09/09/front-end/React/record/ContextMenu/"/>
    <id>/2018/09/09/front-end/React/record/ContextMenu/</id>
    <published>2018-09-08T16:07:08.000Z</published>
    <updated>2018-09-08T16:19:08.592Z</updated>
    
    <content type="html"><![CDATA[<p>基本用法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;span onContextMenu=&#123;contextHandler&#125;&gt;</div><div class="line">contextHandler = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">    event.preventDefault();<span class="comment">// 可禁用掉默认右键菜单</span></div><div class="line">    ...一系列处理</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>具体示例:<br><a href="http://react-component.github.io/tree/examples/contextmenu.html" target="_blank" rel="external">rc-tree onRightClick实例</a></p>
<p>如示例，右键点击之后我们可以在当前点击点动态加载一个组件，位置绝对定位即可。<br>组件的显示隐藏逻辑不想自己写的话可以直接用antd的Tooltip/Popover一类的<br>注意在组件销毁的时候需要同时unmount刚才动态加载的组件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本用法:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span onContextMenu=&amp;#123;contextHandler&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;contextHandler = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    event.preventDefault();&lt;span class=&quot;comment&quot;&gt;// 可禁用掉默认右键菜单&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...一系列处理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>createPortal</title>
    <link href="/2018/09/08/front-end/React/record/createPortal/"/>
    <id>/2018/09/08/front-end/React/record/createPortal/</id>
    <published>2018-09-08T15:53:10.000Z</published>
    <updated>2018-09-08T16:18:34.123Z</updated>
    
    <content type="html"><![CDATA[<p>基本用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ReactDOM.createPortal(child, container)</div></pre></td></tr></table></figure></p>
<p><a href="https://reactjs.org/docs/portals.html" target="_blank" rel="external">Portals-React官方文档</a><br><a id="more"></a><br>穿梭框，一般用于将子组件内容render到父组件里。<br>大概实现就是父组件给子组件预留一个dom接口(指定个id方便子组件找到)，一般是个空span或空div<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Parent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;div&gt;</div><div class="line">            我是父组件,我的子组件名字是：</div><div class="line">            &lt;div id=<span class="string">"childContainer"</span> /&gt;</div><div class="line">            下面请我的子组件讲话:</div><div class="line">            &lt;Child /&gt;</div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure></p>
<p>然后子组件找到这个childContainer的dom节点，把想要渲染的东西渲染上去即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Child = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> name = <span class="string">'啊哈哈哈'</span></div><div class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'childContainer'</span>);</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;div&gt;</div><div class="line">            我是音痴啊哈哈哈哈哈</div><div class="line">            &#123;ReactDOM.createPortal(name, container)&#125;</div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure></p>
<p>这样渲染出来的效果大概如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">我是父组件,我的子组件名字是：</div><div class="line">啊哈哈哈</div><div class="line">下面请我的子组件讲话:</div><div class="line">我是音痴啊哈哈哈哈哈</div></pre></td></tr></table></figure></p>
<p>完结撒花</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本用法：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ReactDOM.createPortal(child, container)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/portals.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Portals-React官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="React" scheme="/tags/React/"/>
    
  </entry>
  
</feed>
